// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/metrics": {
            "get": {
                "description": "Returns an HTML page showing the number of times Chirpy has been visited",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get Metrics",
                "operationId": "get-metrics",
                "responses": {
                    "200": {
                        "description": "HTML content displaying the visit count",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/reset": {
            "post": {
                "description": "Reset the number of times Chirpy has been visisted to 0",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Reset Metrics",
                "operationId": "post-reset",
                "responses": {
                    "200": {
                        "description": "Hits set to 0",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/healthz": {
            "get": {
                "description": "Returns OK if the server is healthy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "post": {
                "description": "Create a new Chirpy user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a new user",
                "operationId": "post-create-user",
                "parameters": [
                    {
                        "description": "user email to get new user created",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.userParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "created user's information",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "500": {
                        "description": "Failed to create user in DB",
                        "schema": {
                            "$ref": "#/definitions/helpers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/app/validate_chirp": {
            "post": {
                "description": "Validate a chirp's length (should be less than 14 characters) and replace profane words with ****",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validation"
                ],
                "summary": "Validate a chirp",
                "operationId": "post-validation",
                "parameters": [
                    {
                        "description": "Chirp content to validate",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.parameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cleaned chirp body with profanity removed",
                        "schema": {
                            "$ref": "#/definitions/handlers.returnValues"
                        }
                    },
                    "400": {
                        "description": "Chirp is too long, should be less than 140 chars",
                        "schema": {
                            "$ref": "#/definitions/helpers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to decode parameters",
                        "schema": {
                            "$ref": "#/definitions/helpers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.parameters": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                }
            }
        },
        "handlers.returnValues": {
            "type": "object",
            "properties": {
                "cleaned_body": {
                    "type": "string"
                }
            }
        },
        "handlers.userParams": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "helpers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Chirpy API",
	Description:      "This is the API server for Chirpy application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
