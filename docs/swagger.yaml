basePath: /
definitions:
  handlers.parameters:
    properties:
      body:
        type: string
    type: object
  handlers.returnValues:
    properties:
      cleaned_body:
        type: string
    type: object
  handlers.userParams:
    properties:
      email:
        type: string
    type: object
  helpers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API server for Chirpy application
  title: Chirpy API
  version: "1.0"
paths:
  /admin/metrics:
    get:
      description: Returns an HTML page showing the number of times Chirpy has been
        visited
      operationId: get-metrics
      produces:
      - text/html
      responses:
        "200":
          description: HTML content displaying the visit count
          schema:
            type: string
      summary: Get Metrics
      tags:
      - metrics
  /admin/reset:
    post:
      description: Delete all users in database and reset the number of times Chirpy
        has been visisted to 0
      operationId: post-reset
      produces:
      - text/plain
      responses:
        "200":
          description: Hits set to 0
          schema:
            type: string
        "500":
          description: Failed to delete users in db
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
      summary: Reset Metrics
      tags:
      - user
  /api/healthz:
    get:
      consumes:
      - application/json
      description: Returns OK if the server is healthy
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health check endpoint
      tags:
      - health
  /api/users:
    post:
      consumes:
      - application/json
      description: Create a new Chirpy user
      operationId: post-create-user
      parameters:
      - description: user email to get new user created
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.userParams'
      produces:
      - application/json
      responses:
        "200":
          description: created user's information
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Failed to create user in DB
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
      summary: Create new user
      tags:
      - user
  /app/validate_chirp:
    post:
      consumes:
      - application/json
      description: Validate a chirp's length (should be less than 14 characters) and
        replace profane words with ****
      operationId: post-validation
      parameters:
      - description: Chirp content to validate
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.parameters'
      produces:
      - application/json
      responses:
        "200":
          description: Cleaned chirp body with profanity removed
          schema:
            $ref: '#/definitions/handlers.returnValues'
        "400":
          description: Chirp is too long, should be less than 140 chars
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
        "500":
          description: Failed to decode parameters
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
      summary: Validate a chirp
      tags:
      - validation
swagger: "2.0"
